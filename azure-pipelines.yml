# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

jobs:
  - job: Windows
    pool:
      vmImage: 'windows-latest'

    variables:
      buildConfiguration: 'Release'

    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        versioningScheme: byBuildNumber
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        arguments: --configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool

    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
      displayName: Create reports

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        versioningScheme: byBuildNumber
        outputDir: $(System.DefaultWorkingDirectory)/nupkg
        arguments: '--configuration $(buildConfiguration)'
        verbosityPack: 'Normal'
      displayName: 'dotnet pack $(buildConfiguration)'

    - publish: $(System.DefaultWorkingDirectory)/nupkg
      artifact: Packages

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-format
      displayName: Install dotnet-format

    - script: dotnet-format --check --dry-run
      displayName: Check formatting

  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: 'Release'

    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        versioningScheme: byBuildNumber
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        arguments: --configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests

  - job: Mac
    pool:
      vmImage: 'macOS-latest'

    variables:
      buildConfiguration: 'Release'

    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        versioningScheme: byBuildNumber
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        arguments: --configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests
